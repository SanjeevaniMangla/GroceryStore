{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Notification from './Notification.vue';\nexport default {\n  name: 'Home',\n  components: {\n    Notification\n  },\n  data() {\n    return {\n      notification: null\n    };\n  },\n  computed: {\n    isAuthenticated() {\n      //Get the authenticationstatus from Vuex store\n      return this.$store.state.isAuthenticated;\n    },\n    isLoginPage() {\n      // Check if the current route is the login page\n      return this.$route.path === '/login';\n    },\n    isSignUpPage() {\n      // Check if the current route is the sign up page\n      return this.$route.path === '/signup';\n    },\n    isAdmin() {\n      const role = this.$store.state.userRole;\n      if (role === 'Admin') {\n        return true;\n      }\n      return false;\n    }\n  },\n  methods: {\n    clearNotification() {\n      this.$store.commit('clearNotification');\n    },\n    handleDashboardClick() {\n      const expiryTime = this.$store.state.expiryTime;\n      if (this.isAuthenticated && this.isTokenExpired(expiryTime)) {\n        // Token has expired, perform logout\n        this.logout();\n      } else {\n        const role = this.$store.state.userRole;\n        if (role === 'Admin') {\n          return this.$router.push('/admin/dashboard');\n        } else if (role === 'User') {\n          return this.$router.push('/user/dashboard');\n        } else {\n          return this.$router.push('/');\n        }\n      }\n    },\n    isTokenExpired(expiryTime) {\n      if (expiryTime) {\n        return Date.now() > new Date(expiryTime); // 2 minutes in milliseconds\n      }\n\n      return false;\n    },\n    async logout() {\n      this.logoutInProgress = true;\n      const response = await fetch(\"http://127.0.0.1:5000/logout\", {\n        method: \"POST\",\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      }).then(async result => {\n        const data = await result.json();\n        this.$store.commit('setAuthentication', {\n          isAuthenticated: false\n        });\n        this.$store.commit('setToken', {\n          access_token: null\n        });\n        this.$store.commit('setExpiryTime', {\n          expiryTime: null\n        });\n        this.$store.commit('setRole', {\n          userRole: null\n        });\n        if (result.status === 200) {\n          this.$store.commit('setNotification', {\n            variant: 'success',\n            message: data.message\n          });\n        } else {\n          this.$store.commit('setNotification', {\n            variant: 'error',\n            message: 'Your session is expired. Login again!!'\n          });\n        }\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second (adjust as needed)\n\n        window.location.href = '/';\n      });\n    }\n  }\n};","map":{"version":3,"names":["Notification","name","components","data","notification","computed","isAuthenticated","$store","state","isLoginPage","$route","path","isSignUpPage","isAdmin","role","userRole","methods","clearNotification","commit","handleDashboardClick","expiryTime","isTokenExpired","logout","$router","push","Date","now","logoutInProgress","response","fetch","method","headers","Authorization","localStorage","getItem","then","result","json","access_token","status","variant","message","Promise","resolve","setTimeout","window","location","href"],"sources":["src/components/Home.vue"],"sourcesContent":["<template>\r\n    <nav id=\"home-nav\" class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div id=\"home-search-nav\" class=\"navbar-nav\">\r\n            <a v-if=\"isAuthenticated\" id=\"home-search-category\" class=\"nav-item nav-link\"><router-link to=\"/search/categories\">Search Category</router-link></a>\r\n            <a v-if=\"isAuthenticated\" id=\"home-search-products\" class=\"nav-item nav-link\"><router-link to=\"/search/products\">Search products</router-link></a>\r\n        </div>\r\n        <div class=\"collapse navbar-collapse justify-content-end\" id=\"navbar\">\r\n            <div id=\"home-navbar-end\" class=\"navbar-nav\">\r\n                <!-- <a class=\"nav-item nav-link\"><router-link to=\"/feed\">Feed</router-link></a> -->\r\n                <template v-if=\"isAuthenticated\">\r\n                    <template v-if=\"isAdmin\">\r\n                        <a id=\"home-admin-summary\" class=\"nav-item nav-link\"><router-link to=\"/summary\">Summary</router-link></a>\r\n                        <a id=\"home-admin-dashboard\" class=\"nav-item nav-link\"><router-link to=\"/admin/dashboard\">Dashboard</router-link></a>\r\n                    </template>\r\n                    <template v-else>\r\n                        <a id=\"home-user-bookings\" class=\"nav-item nav-link\"><router-link to=\"/bookings\">Bookings</router-link></a>\r\n                        <a id=\"home-user-dashboard\" class=\"nav-item nav-link\"><router-link to=\"/user/dashboard\">Dashboard</router-link></a>\r\n                    </template>\r\n                    <div class=\"nav-item nav-link\"  @click=\"logout\" >Logout</div>\r\n                </template>\r\n                <template v-else>\r\n                    <template v-if=\"isLoginPage\">\r\n                        <a id=\"home-sign-up\" class=\"nav-item nav-link\"><router-link to=\"/signup\">Sign Up</router-link></a>\r\n                    </template>\r\n                    <template v-else-if=\"isSignUpPage\">\r\n                        <a id=\"home-login\" class=\"nav-item nav-link\"><router-link to=\"/login\">Login</router-link></a>\r\n                    </template>\r\n                    <template v-else>\r\n                        <a id=\"home-login\" class=\"nav-item nav-link\"><router-link to=\"/login\">Login</router-link></a>\r\n                        <a id=\"home-sign-up\" class=\"nav-item nav-link\"><router-link to=\"/signup\">Sign Up</router-link></a>\r\n                    </template>\r\n                </template>\r\n            </div>\r\n        </div> \r\n        <Notification v-if=\"$store.state.notification\" :variant=\"$store.state.notification.variant\" \r\n        :message=\"$store.state.notification.message\" @clear-notification=\"clearNotification\"/>\r\n    </nav>\r\n</template>\r\n\r\n<script>\r\nimport Notification from './Notification.vue'\r\nexport default{\r\n    name : 'Home',\r\n    components:{\r\n        Notification\r\n    },\r\n    data(){\r\n        return {\r\n            notification: null\r\n            \r\n        };\r\n    },\r\n    computed:{\r\n        isAuthenticated(){\r\n            //Get the authenticationstatus from Vuex store\r\n            return this.$store.state.isAuthenticated;\r\n        },\r\n        isLoginPage(){\r\n            // Check if the current route is the login page\r\n            return this.$route.path === '/login';\r\n        },\r\n        isSignUpPage(){\r\n            // Check if the current route is the sign up page\r\n            return this.$route.path === '/signup';\r\n        },\r\n        isAdmin() {\r\n            const role = this.$store.state.userRole;\r\n            if (role === 'Admin') {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    },\r\n    methods:{\r\n        clearNotification() {\r\n            this.$store.commit('clearNotification');\r\n        },\r\n        handleDashboardClick() {\r\n            const expiryTime = this.$store.state.expiryTime\r\n            if (this.isAuthenticated && this.isTokenExpired(expiryTime)) {\r\n                // Token has expired, perform logout\r\n                this.logout()\r\n            }\r\n            else{\r\n            const role = this.$store.state.userRole;\r\n            if (role === 'Admin') {\r\n                return this.$router.push('/admin/dashboard');\r\n            }\r\n            else if(role === 'User'){\r\n                return this.$router.push('/user/dashboard');\r\n            }\r\n            else{\r\n                return this.$router.push('/');\r\n            }\r\n            }\r\n        },\r\n        isTokenExpired(expiryTime) {\r\n            if (expiryTime) {\r\n                return  Date.now() > new Date(expiryTime) // 2 minutes in milliseconds\r\n            }\r\n            return false\r\n        },\r\n        async logout()\r\n        {\r\n            this.logoutInProgress = true;\r\n            const response = await fetch(\"http://127.0.0.1:5000/logout\", {\r\n                method: \"POST\",\r\n                headers : {\r\n                    Authorization: 'Bearer ' + localStorage.getItem('access_token')\r\n                }\r\n            }).then(async result => {\r\n                const data = await result.json();\r\n                this.$store.commit('setAuthentication', { isAuthenticated: false });\r\n                this.$store.commit('setToken', { access_token: null });\r\n                this.$store.commit('setExpiryTime', { expiryTime: null });\r\n                this.$store.commit('setRole', { userRole: null });\r\n                \r\n                if (result.status === 200) {\r\n                    this.$store.commit('setNotification', { variant: 'success', message: data.message });\r\n                } else{\r\n                    this.$store.commit('setNotification', { variant: 'error', message: 'Your session is expired. Login again!!' });\r\n                }\r\n\r\n                await new Promise(resolve => setTimeout(resolve, 1000)); // Delay for 1 second (adjust as needed)\r\n\r\n                window.location.href = '/'\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n</script>\r\n\r\n\r\n<style scoped>\r\n\r\n#home-nav{\r\n    height: 60px;\r\n}\r\na {\r\n  text-decoration: none;\r\n  color: white;\r\n}\r\n\r\na:hover {\r\n    color: rgb(255, 68, 0);\r\n}\r\n\r\n.login-link:hover,\r\n.signup-link:hover {\r\n  text-decoration: none;\r\n}\r\n\r\n\r\n</style>"],"mappings":";AAwCA,OAAAA,YAAA;AACA;EACAC,IAAA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACA;MACAC,YAAA;IAEA;EACA;EACAC,QAAA;IACAC,gBAAA;MACA;MACA,YAAAC,MAAA,CAAAC,KAAA,CAAAF,eAAA;IACA;IACAG,YAAA;MACA;MACA,YAAAC,MAAA,CAAAC,IAAA;IACA;IACAC,aAAA;MACA;MACA,YAAAF,MAAA,CAAAC,IAAA;IACA;IACAE,QAAA;MACA,MAAAC,IAAA,QAAAP,MAAA,CAAAC,KAAA,CAAAO,QAAA;MACA,IAAAD,IAAA;QACA;MACA;MACA;IACA;EACA;EACAE,OAAA;IACAC,kBAAA;MACA,KAAAV,MAAA,CAAAW,MAAA;IACA;IACAC,qBAAA;MACA,MAAAC,UAAA,QAAAb,MAAA,CAAAC,KAAA,CAAAY,UAAA;MACA,SAAAd,eAAA,SAAAe,cAAA,CAAAD,UAAA;QACA;QACA,KAAAE,MAAA;MACA,OACA;QACA,MAAAR,IAAA,QAAAP,MAAA,CAAAC,KAAA,CAAAO,QAAA;QACA,IAAAD,IAAA;UACA,YAAAS,OAAA,CAAAC,IAAA;QACA,OACA,IAAAV,IAAA;UACA,YAAAS,OAAA,CAAAC,IAAA;QACA,OACA;UACA,YAAAD,OAAA,CAAAC,IAAA;QACA;MACA;IACA;IACAH,eAAAD,UAAA;MACA,IAAAA,UAAA;QACA,OAAAK,IAAA,CAAAC,GAAA,SAAAD,IAAA,CAAAL,UAAA;MACA;;MACA;IACA;IACA,MAAAE,OAAA,EACA;MACA,KAAAK,gBAAA;MACA,MAAAC,QAAA,SAAAC,KAAA;QACAC,MAAA;QACAC,OAAA;UACAC,aAAA,cAAAC,YAAA,CAAAC,OAAA;QACA;MACA,GAAAC,IAAA,OAAAC,MAAA;QACA,MAAAjC,IAAA,SAAAiC,MAAA,CAAAC,IAAA;QACA,KAAA9B,MAAA,CAAAW,MAAA;UAAAZ,eAAA;QAAA;QACA,KAAAC,MAAA,CAAAW,MAAA;UAAAoB,YAAA;QAAA;QACA,KAAA/B,MAAA,CAAAW,MAAA;UAAAE,UAAA;QAAA;QACA,KAAAb,MAAA,CAAAW,MAAA;UAAAH,QAAA;QAAA;QAEA,IAAAqB,MAAA,CAAAG,MAAA;UACA,KAAAhC,MAAA,CAAAW,MAAA;YAAAsB,OAAA;YAAAC,OAAA,EAAAtC,IAAA,CAAAsC;UAAA;QACA;UACA,KAAAlC,MAAA,CAAAW,MAAA;YAAAsB,OAAA;YAAAC,OAAA;UAAA;QACA;QAEA,UAAAC,OAAA,CAAAC,OAAA,IAAAC,UAAA,CAAAD,OAAA;;QAEAE,MAAA,CAAAC,QAAA,CAAAC,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}