{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Home from './Home.vue';\nimport { BDropdown, BDropdownItem } from 'bootstrap-vue';\nexport default {\n  name: 'Login',\n  components: {\n    Home,\n    BDropdown,\n    BDropdownItem\n  },\n  data() {\n    return {\n      email: \"\",\n      password: \"\",\n      errorMessages: [],\n      selectedRole: \"\",\n      roles: [],\n      serverErrorMessages: []\n    };\n  },\n  mounted() {\n    this.fetchRoles();\n  },\n  watch: {\n    email(value) {\n      this.handleInputChange('email', value);\n      this.serverErrorMessages = [];\n    },\n    password(value) {\n      this.handleInputChange('password', value);\n      this.serverErrorMessages = [];\n    },\n    selectedRole(value) {\n      this.handleInputChange('selectedRole', value);\n      this.serverErrorMessages = [];\n    }\n  },\n  computed: {\n    errorMessageMarginTop() {\n      let len = this.errorMessages.length > 0 ? this.errorMessages.length : this.serverErrorMessages.length;\n      if (20 - len * 2 >= 2) return `${20 - len * 2}px`;else return `${2}px`;\n    }\n  },\n  methods: {\n    handleInputChange(fieldName, fieldValue) {\n      let message = '';\n      if (fieldName === 'email') {\n        message = 'Email should not be empty';\n        this.validateEachEntity(fieldValue, message);\n      } else if (fieldName === 'password') {\n        message = 'Password should not be empty';\n        this.validateEachEntity(fieldValue, message);\n      } else if (fieldName === 'selectedRole') {\n        message = 'Role should be selected';\n        this.validateEachEntity(fieldValue, message);\n      }\n    },\n    async fetchRoles() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/api/roles');\n        const data = await response.json();\n        this.roles = data;\n      } catch (error) {\n        this.errorMessages.push(\"Error fetching roles\");\n      }\n    },\n    selectRole(role) {\n      this.selectedRole = role.storedName;\n    },\n    validateEachEntity(entityToValidate, message) {\n      if (this.errorMessages.includes(message)) {\n        let indexOFMessage = this.errorMessages.indexOf(message);\n        this.errorMessages = this.errorMessages.filter(errorMessage => errorMessage !== message);\n        if (entityToValidate == null || entityToValidate == '') {\n          this.errorMessages.splice(indexOFMessage, 0, message);\n        }\n      } else {\n        if (entityToValidate == null || entityToValidate == '') {\n          this.errorMessages.push(message);\n        }\n      }\n    },\n    validation() {\n      let message = 'Email should not be empty';\n      this.validateEachEntity(this.email, message);\n      message = 'Password should not be empty';\n      this.validateEachEntity(this.password, message);\n      message = 'Role should be selected';\n      this.validateEachEntity(this.selectedRole, message);\n    },\n    async login() {\n      this.validation();\n      if (this.errorMessages.length > 0) {\n        return;\n      }\n      const response = await fetch(\"http://127.0.0.1:5000/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          input_email: this.email,\n          input_password: this.password,\n          input_role: this.selectedRole\n        })\n      }).then(async result => {\n        const data = await result.json();\n        if (result.status === 200) {\n          this.$store.commit('setAuthentication', {\n            isAuthenticated: true\n          });\n          this.$store.commit('setToken', {\n            access_token: data.access_token\n          });\n          this.$store.commit('setExpiryTime', {\n            expiryTime: data.expires\n          });\n          this.$store.commit('setRole', {\n            userRole: this.selectedRole\n          });\n          this.$store.commit('setUserId', {\n            userId: data.id\n          });\n          if (this.selectedRole === 'Admin') {\n            this.$router.push('/admin/dashboard');\n          } else if (this.selectedRole === 'Manager') {\n            this.$router.push('/manager/dashboard');\n          } else {\n            this.$router.push('/user/dashboard');\n          }\n        } else {\n          this.serverErrorMessages = data.error_messages;\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["Home","BDropdown","BDropdownItem","name","components","data","email","password","errorMessages","selectedRole","roles","serverErrorMessages","mounted","fetchRoles","watch","value","handleInputChange","computed","errorMessageMarginTop","len","length","methods","fieldName","fieldValue","message","validateEachEntity","response","fetch","json","error","push","selectRole","role","storedName","entityToValidate","includes","indexOFMessage","indexOf","filter","errorMessage","splice","validation","login","method","headers","body","JSON","stringify","input_email","input_password","input_role","then","result","status","$store","commit","isAuthenticated","access_token","expiryTime","expires","userRole","userId","id","$router","error_messages"],"sources":["src/components/Login.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <Home />\r\n        <h2 id=\"login-input\" class=\"input text-center\">Login</h2>\r\n        <div id=\"login-form\" class=\"form-group\">\r\n            <div id=\"login-error-message\" v-if=\"errorMessages.length > 0 || serverErrorMessages.length > 0\" class=\"error-message\">\r\n                <ul>\r\n                    <template v-if=\"errorMessages.length > 0\">\r\n                        <li v-for=\"errorMessage in errorMessages\" :key=\"errorMessage\">{{ errorMessage }}</li>\r\n                    </template>\r\n                    <template v-else-if=\"serverErrorMessages.length > 0\">\r\n                         <li v-for=\"serverErrorMessage in serverErrorMessages\" :key=\"serverErrorMessage\">{{ serverErrorMessage }}</li>\r\n                    </template>\r\n                </ul>\r\n            </div>\r\n\r\n            <label for=\"email\" :style=\"{ marginTop: errorMessageMarginTop }\" class=\"text-left login-form-label\">Email Address</label>\r\n            <input type=\"text\" v-model=\"email\" id=\"email_id\" name=\"email\" class=\"form-control\" placeholder=\"Enter Email\" size=\"10\" />\r\n            \r\n            <label for=\"password\" :style=\"{ marginTop: errorMessageMarginTop }\" class=\"text-left login-form-label\">Password</label>\r\n            <input type=\"password\" v-model=\"password\" id=\"password_id\" name=\"password\" class=\"form-control\" placeholder=\"Enter Password\"\r\n                size=\"15\" />\r\n\r\n            <div id=\"login-dropdown\" :style=\"{ marginTop: errorMessageMarginTop }\" class=\"dropdown text-center\">\r\n                <b-dropdown v-model=\"selectedRole\" id=\"login-dropdown-button\" :text=\"selectedRole || 'Role'\">\r\n                    <b-dropdown-item v-for=\"role in roles\" :key=\"role.id\" :value=\"role.storedName\" @click=\"selectRole(role)\">\r\n                        {{ role.storedName }}\r\n                    </b-dropdown-item>\r\n                </b-dropdown>\r\n            </div>\r\n\r\n            <div class=\"text-center\" style=\"padding-top: 20px;\">\r\n                <button class=\"btn btn-primary\" v-on:click=\"login\">Login</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport Home from './Home.vue'\r\nimport { BDropdown, BDropdownItem } from 'bootstrap-vue';\r\nexport default{\r\n    name : 'Login',\r\n    components : {\r\n        Home,\r\n        BDropdown,\r\n        BDropdownItem,\r\n    },\r\n    data(){\r\n        return {\r\n            email : \"\",\r\n            password : \"\",\r\n            errorMessages: [],\r\n            selectedRole: \"\",\r\n            roles: [],\r\n            serverErrorMessages: []\r\n        };\r\n    },\r\n    mounted(){\r\n        this.fetchRoles();\r\n    },\r\n    watch: {\r\n        email(value) {\r\n            this.handleInputChange('email', value);\r\n            this.serverErrorMessages = []\r\n        },\r\n\r\n        password(value) {\r\n            this.handleInputChange('password', value);\r\n            this.serverErrorMessages = []\r\n\r\n        },\r\n\r\n        selectedRole(value){\r\n            this.handleInputChange('selectedRole', value);\r\n            this.serverErrorMessages = []\r\n\r\n        }\r\n    },\r\n    computed: {\r\n        errorMessageMarginTop() {\r\n            let len = this.errorMessages.length > 0 ? this.errorMessages.length : this.serverErrorMessages.length;\r\n            if(20 - (len) * 2 >= 2)\r\n                return `${20 - (len) * 2}px`;\r\n            else\r\n                return `${2}px`;\r\n        }\r\n    },\r\n    methods:{\r\n        handleInputChange(fieldName, fieldValue){\r\n\r\n            let message = '';\r\n            if(fieldName === 'email'){\r\n                message = 'Email should not be empty';\r\n                this.validateEachEntity(fieldValue, message);\r\n            }\r\n            else if(fieldName === 'password'){\r\n                message = 'Password should not be empty';\r\n                this.validateEachEntity(fieldValue, message);\r\n            }\r\n            else if(fieldName === 'selectedRole'){\r\n                message = 'Role should be selected';\r\n                this.validateEachEntity(fieldValue, message);\r\n            }\r\n        },\r\n        async fetchRoles(){\r\n            try{\r\n                const response = await fetch('http://127.0.0.1:5000/api/roles');\r\n                const data = await response.json();\r\n                this.roles = data;\r\n            }\r\n            catch(error){\r\n                this.errorMessages.push(\"Error fetching roles\");\r\n            }\r\n        },\r\n        selectRole(role){\r\n            this.selectedRole = role.storedName;\r\n        },\r\n        validateEachEntity(entityToValidate, message){\r\n            if(this.errorMessages.includes(message)){\r\n                let indexOFMessage = this.errorMessages.indexOf(message);\r\n                this.errorMessages = this.errorMessages.filter((errorMessage) => errorMessage !== message);\r\n                if(entityToValidate == null || entityToValidate == ''){\r\n                    this.errorMessages.splice(indexOFMessage, 0, message);\r\n                }\r\n            }\r\n            else{\r\n                if(entityToValidate == null || entityToValidate == ''){\r\n                    this.errorMessages.push(message);\r\n                }\r\n            }\r\n        }\r\n        ,\r\n        validation(){\r\n\r\n            let message = 'Email should not be empty'\r\n            this.validateEachEntity(this.email, message);\r\n\r\n            message = 'Password should not be empty';\r\n            this.validateEachEntity(this.password, message);\r\n\r\n            message = 'Role should be selected';\r\n            this.validateEachEntity(this.selectedRole, message);\r\n        },\r\n        async login()\r\n        {\r\n            this.validation();\r\n            if(this.errorMessages.length > 0){\r\n                return;\r\n            }\r\n\r\n            const response = await fetch(\"http://127.0.0.1:5000/login\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    input_email : this.email,\r\n                    input_password : this.password,\r\n                    input_role: this.selectedRole\r\n                }),\r\n            }).then(async result => {\r\n                const data = await result.json();\r\n                if (result.status === 200) {\r\n                    this.$store.commit('setAuthentication', { isAuthenticated: true });\r\n                    this.$store.commit('setToken', { access_token: data.access_token });\r\n                    this.$store.commit('setExpiryTime', { expiryTime: data.expires });\r\n                    this.$store.commit('setRole', { userRole: this.selectedRole});\r\n                    this.$store.commit('setUserId', { userId: data.id });\r\n                    if(this.selectedRole === 'Admin'){\r\n                        this.$router.push('/admin/dashboard');\r\n                    }\r\n                    else if(this.selectedRole === 'Manager'){\r\n                        this.$router.push('/manager/dashboard');\r\n                    }\r\n                    else{\r\n                        this.$router.push('/user/dashboard');\r\n                    }\r\n                } else{\r\n                    this.serverErrorMessages = data.error_messages;\r\n                }\r\n                \r\n            }\r\n\r\n            )\r\n\r\n            \r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n/* Container styles */\r\n#login-input {\r\n    margin-top: 120px;\r\n    text-align: center;\r\n}\r\n\r\n#login-form {\r\n    width: 400px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n    background-color: rgb(203, 235, 135);\r\n    border: 8px double red;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n}\r\n\r\n#login-error-message {\r\n  width: 370px;\r\n  margin-top: -15px;\r\n  border-color: black; \r\n  border: 2px solid black;\r\n}\r\n\r\n#login-error-message ul {\r\n  color: white;\r\n  background-color: lightcoral;\r\n  padding: 10px;\r\n  margin: 0;\r\n  list-style-type: none;\r\n}\r\n\r\n/* Form field styles */\r\n.form-control {\r\n    width: 300px;\r\n    height: 40px;\r\n    border: 1px solid black;\r\n    padding: 2px;\r\n    margin-bottom: 10px;\r\n    box-sizing: border-box;\r\n}\r\n\r\n\r\n.login-form-label{\r\n    text-align: left;\r\n}\r\n\r\n/* Dropdown styles */\r\n\r\n.dropdown-toggle {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 300px;\r\n    height: 40px;\r\n    border: 1px solid black;\r\n    cursor: pointer;\r\n}\r\n\r\n.dropdown-menu {\r\n    width: 300px;\r\n}\r\n\r\n.dropdown-item {\r\n    padding: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n/* Button styles */\r\n.btn-primary {\r\n    width: 150px;\r\n    height: 40px;\r\n    background-color: #007bff;\r\n    color: white;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}