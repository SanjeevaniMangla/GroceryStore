{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Home from './Home.vue';\nimport Notification from './Notification.vue';\nexport default {\n  name: 'UserDashboard',\n  components: {\n    Home,\n    Notification\n  },\n  data() {\n    return {\n      categories: [],\n      errorMessages: [],\n      serverErrorMessages: [],\n      isSubmitButtonClicked: false,\n      showBookingModal: false,\n      numberOfProducts: 0,\n      totalPrice: 0,\n      price: 0,\n      currentCategory: null,\n      currentProduct: null\n    };\n  },\n  created() {\n    this.fetchCategories();\n  },\n  watch: {\n    numberOfProducts: function (newValue) {\n      // Calculate the total price by multiplying the number of products with the product price.\n      this.totalPrice = newValue * this.price;\n    }\n  },\n  methods: {\n    clearNotification() {\n      this.$store.commit('clearNotification');\n    },\n    openBookingModal(category, product) {\n      this.currentCategory = category; // Store the current theatre\n      this.currentProduct = product;\n      this.showBookingModal = true;\n      const bookedProducts = category.bookings.reduce((totalProducts, booking) => totalProducts + booking.number_of_products, 0);\n      this.price = product.price;\n    },\n    closeBookingModal() {\n      this.showBookingModal = false;\n      this.price = 0;\n    },\n    async fetchCategories() {\n      const user_id = parseInt(localStorage.getItem('userId'));\n      const response = await fetch(`http://127.0.0.1:5000/user/${user_id}/category_api`, {\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token')\n        }\n      });\n      const data = await response.json();\n      if (response.ok) {\n        this.categories = data.categories;\n      } else if (response.status === 409) {\n        // Handle conflict\n      } else {\n        this.$store.commit('setNotification', {\n          variant: 'error',\n          message: 'Something went wrong. Try again!!!'\n        });\n      }\n    },\n    chunkArray(arr, size) {\n      // Helper method to split the array into groups of given size\n      const chunkedArr = [];\n      for (let i = 0; i < arr.length; i += size) {\n        chunkedArr.push(arr.slice(i, i + size));\n      }\n      return chunkedArr;\n    },\n    validation() {\n      let message = 'Number of products cannot be 0 or empty';\n      if (this.errorMessages.includes(message)) {\n        let indexOFMessage = this.errorMessages.indexOf(message);\n        this.errorMessages = this.errorMessages.filter(errorMessage => errorMessage !== message);\n        if (this.numberOfProducts === null || this.numberOfProducts === 0 || this.numberOfProducts === \"\") {\n          this.errorMessages.splice(indexOFMessage, 0, message);\n        }\n      } else {\n        if (this.numberOfProducts === null || this.numberOfProducts === 0 || this.numberOfProducts === \"\") {\n          this.errorMessages.push(message);\n        }\n      }\n    },\n    async submitBooking(category, product) {\n      this.isSubmitButtonClicked = true;\n      this.validation();\n      if (this.errorMessages.length > 0) {\n        return;\n      }\n      const user_id = parseInt(localStorage.getItem('userId'));\n      const response = await fetch(`http://127.0.0.1:5000/user/${user_id}/category/${this.currentCategory.id}/product/${this.currentProduct.id}/booking_api`, {\n        method: \"POST\",\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          total_price: this.totalPrice,\n          number_of_products: this.numberOfProducts\n        })\n      }).then(async result => {\n        const data = await result.json();\n        if (result.ok) {\n          this.$store.commit('setNotification', {\n            variant: 'success',\n            message: data.message\n          });\n          await this.fetchCategories();\n        } else {\n          this.$store.commit('setNotification', {\n            variant: 'error',\n            message: 'Something went wrong. Try again!!!'\n          });\n        }\n        this.closeBookingModal();\n      });\n    }\n  }\n};","map":{"version":3,"names":["Home","Notification","name","components","data","categories","errorMessages","serverErrorMessages","isSubmitButtonClicked","showBookingModal","numberOfProducts","totalPrice","price","currentCategory","currentProduct","created","fetchCategories","watch","newValue","methods","clearNotification","$store","commit","openBookingModal","category","product","bookedProducts","bookings","reduce","totalProducts","booking","number_of_products","closeBookingModal","user_id","parseInt","localStorage","getItem","response","fetch","method","headers","Authorization","json","ok","status","variant","message","chunkArray","arr","size","chunkedArr","i","length","push","slice","validation","includes","indexOFMessage","indexOf","filter","errorMessage","splice","submitBooking","id","body","JSON","stringify","total_price","then","result"],"sources":["src/components/UserDashboard.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <Home />\r\n  \r\n      <div class=\"categories-container\">\r\n        <!-- Loop through each Category -->\r\n        <div v-for=\"category in categories\" :key=\"category.id\" class=\"category-box\">\r\n          <h2>{{ category.name }}</h2>\r\n          <div class=\"shows-container\">\r\n            <!-- Loop through each group of three shows in the category.products_under_category array -->\r\n            <div v-for=\"productGroup in chunkArray(category.products, 3)\" :key=\"productGroup[0].id\" class=\"show-row\">\r\n              <!-- Display three products in each row -->\r\n              <div v-for=\"product in productGroup\" :key=\"product.id\" class=\"show-item\">\r\n                <!-- Display product details -->\r\n                <div class=\"show-details\">\r\n                  <p><strong>Product Name:</strong> {{ product.name }}</p>\r\n                  <p><strong>Price:</strong> {{ product.price }}</p>\r\n                  <b-btn class=\"success\"  @click=\"openBookingModal(category, product)\">Order</b-btn>\r\n                  \r\n                  <b-modal id=\"user-book-modal\" v-model=\"showBookingModal\" size=\"lg\" variant=\"primary\" no-close-on-backdrop>\r\n                    <template #modal-header>\r\n                      <h3 class=\"mb-0\">Order</h3>\r\n                    </template>\r\n                    <template #default>\r\n                      <div class=\"form-group\">\r\n                        <div id=\"user-book-error-message\" v-if=\"(errorMessages.length > 0 || serverErrorMessages.length > 0) && isSubmitButtonClicked\" class=\"user-book-error-message\">\r\n                            <ul>\r\n                                <template v-if=\"errorMessages.length > 0\">\r\n                                  <li v-for=\"errorMessage in errorMessages\" :key=\"errorMessage\">{{ errorMessage }}</li>\r\n                                </template>\r\n                                <template v-else-if=\"serverErrorMessages.length > 0\">\r\n                                  <li v-for=\"serverErrorMessage in serverErrorMessages\" :key=\"serverErrorMessage\">{{ serverErrorMessage }}</li>\r\n                                </template>\r\n                            </ul>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"form-group\">\r\n                        <label for=\"number-of-products\">Number of Products:</label>\r\n                        <input type=\"number\" id=\"number-of-products\" class=\"form-control\" v-model=\"numberOfProducts\" />\r\n                      </div>\r\n                      <div class=\"form-group\">\r\n                        <label for=\"price\">Price:</label>\r\n                        <input type=\"number\" id=\"price\" class=\"form-control\" v-model=\"price\" disabled/>\r\n                      </div>\r\n                      <div class=\"form-group\">\r\n                        <label for=\"total_price\">Total Price:</label>\r\n                        <input type=\"number\" id=\"total_price\" class=\"form-control\" v-model=\"totalPrice\" disabled/>\r\n                      </div>\r\n                    </template>\r\n                    <template #modal-footer>\r\n                      <b-btn class=\"primary\" @click=\"submitBooking(category, product)\">Confirm Order</b-btn>\r\n                      <b-btn @click=\"closeBookingModal\">Close</b-btn>\r\n                    </template>\r\n                  </b-modal>\r\n                  <!-- Add more show details as needed -->\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Notification v-if=\"$store.state.notification\" :variant=\"$store.state.notification.variant\" \r\n          :message=\"$store.state.notification.message\" @clear-notification=\"clearNotification\"/>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import Home from './Home.vue'\r\n  import Notification from './Notification.vue'\r\n  \r\n  export default {\r\n    name: 'UserDashboard',\r\n    components: {\r\n      Home,Notification\r\n    },\r\n    data() {\r\n      return {\r\n        categories: [],\r\n        errorMessages: [],\r\n        serverErrorMessages: [],\r\n        isSubmitButtonClicked: false,\r\n        showBookingModal: false,\r\n        numberOfProducts: 0,\r\n        totalPrice: 0,\r\n        price: 0,\r\n        currentCategory: null,\r\n        currentProduct: null,\r\n      };\r\n    },\r\n    created() {\r\n      this.fetchCategories();\r\n    },\r\n    watch: {\r\n      numberOfProducts: function(newValue) {\r\n        // Calculate the total price by multiplying the number of products with the product price.\r\n        this.totalPrice = newValue * this.price;\r\n      }\r\n    },\r\n    methods: {\r\n      clearNotification() {\r\n              this.$store.commit('clearNotification');\r\n          },\r\n      openBookingModal(category, product){\r\n        this.currentCategory= category; // Store the current theatre\r\n        this.currentProduct = product; \r\n        this.showBookingModal = true;\r\n        const bookedProducts = category.bookings.reduce((totalProducts, booking) => totalProducts + booking.number_of_products, 0);\r\n        this.price = product.price;\r\n  \r\n      },\r\n      closeBookingModal(){\r\n        this.showBookingModal = false;\r\n        this.price = 0;\r\n        \r\n      },\r\n      async fetchCategories() {\r\n        const user_id = parseInt(localStorage.getItem('userId'));\r\n        const response = await fetch(`http://127.0.0.1:5000/user/${user_id}/category_api`, {\r\n          method: 'GET',\r\n          headers: {\r\n            Authorization: 'Bearer ' + localStorage.getItem('access_token'),\r\n          },\r\n        });\r\n  \r\n        const data = await response.json();\r\n        if (response.ok) {\r\n          this.categories = data.categories;\r\n        } else if (response.status === 409) {\r\n          // Handle conflict\r\n        } else {\r\n          this.$store.commit('setNotification', {\r\n            variant: 'error',\r\n            message: 'Something went wrong. Try again!!!',\r\n          });\r\n        }\r\n      },\r\n      chunkArray(arr, size) {\r\n        // Helper method to split the array into groups of given size\r\n        const chunkedArr = [];\r\n        for (let i = 0; i < arr.length; i += size) {\r\n          chunkedArr.push(arr.slice(i, i + size));\r\n        }\r\n        return chunkedArr;\r\n      },\r\n      validation() {\r\n  \r\n        let message = 'Number of products cannot be 0 or empty'\r\n        if (this.errorMessages.includes(message)) {\r\n          let indexOFMessage = this.errorMessages.indexOf(message);\r\n          this.errorMessages = this.errorMessages.filter((errorMessage) => errorMessage !== message);\r\n          if (this.numberOfProducts === null || this.numberOfProducts === 0 || this.numberOfProducts === \"\") {\r\n            this.errorMessages.splice(indexOFMessage, 0, message);\r\n          }\r\n        }\r\n        else {\r\n          if (this.numberOfProducts === null || this.numberOfProducts === 0 || this.numberOfProducts === \"\") {\r\n            this.errorMessages.push(message);\r\n          }\r\n        }\r\n  \r\n      },\r\n      async submitBooking(category, product){\r\n        this.isSubmitButtonClicked = true;\r\n  \r\n        this.validation();\r\n        if (this.errorMessages.length > 0) {\r\n          return;\r\n        }\r\n        const user_id = parseInt(localStorage.getItem('userId'));\r\n        const response = await fetch(`http://127.0.0.1:5000/user/${user_id}/category/${this.currentCategory.id}/product/${this.currentProduct.id}/booking_api`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            Authorization: 'Bearer ' + localStorage.getItem('access_token'),\r\n            \"Content-Type\": \"application/json\"\r\n          },\r\n          body: JSON.stringify({\r\n            total_price: this.totalPrice,\r\n            number_of_products: this.numberOfProducts\r\n          })\r\n        }).then(async result => {\r\n          const data = await result.json();\r\n          if (result.ok) {\r\n            this.$store.commit('setNotification', { variant: 'success', message: data.message });\r\n            await this.fetchCategories();\r\n          }\r\n          else {\r\n            this.$store.commit('setNotification', { variant: 'error', message: 'Something went wrong. Try again!!!' });\r\n          }\r\n          this.closeBookingModal();\r\n        })\r\n      }\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Add your custom styles here */\r\n  .categories-container {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n  }\r\n  \r\n  .category-box {\r\n    width: 100%;\r\n    margin: 10px;\r\n    padding: 20px;\r\n    border: 2px solid red;\r\n    background-color: yellow;\r\n  }\r\n  \r\n  .shows-container {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    height: 245px;\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  .show-row {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n  \r\n  .show-item {\r\n    width: calc(33.33% - 20px);\r\n    margin: 10px;\r\n    padding: 10px;\r\n    border: 4px solid blue;\r\n    background-color: greenyellow;\r\n  }\r\n  #user-book-error-message {\r\n    width: 750px;\r\n    margin-top: -15px;\r\n    border-color: black; \r\n    border: 2px solid black;\r\n  }\r\n  \r\n  #user-book-error-message ul {\r\n    color: white;\r\n    background-color: lightcoral;\r\n    padding: 10px;\r\n    margin: 0;\r\n    list-style-type: none;\r\n  }\r\n  \r\n  </style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}