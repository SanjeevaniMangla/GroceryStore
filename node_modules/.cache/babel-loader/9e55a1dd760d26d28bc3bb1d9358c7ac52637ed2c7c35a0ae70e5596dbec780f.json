{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Home from './Home.vue';\nexport default {\n  name: 'SearchCategory',\n  components: {\n    Home\n  },\n  data() {\n    return {\n      categories: [],\n      searchName: \"\"\n    };\n  },\n  methods: {\n    // ... Existing search methods ...\n    chunkArray(arr, size) {\n      // Helper method to split the array into groups of given size\n      const chunkedArr = [];\n      for (let i = 0; i < arr.length; i += size) {\n        chunkedArr.push(arr.slice(i, i + size));\n      }\n      return chunkedArr;\n    },\n    getImageUrl(imagePath) {\n      return require(`../assets/images/${imagePath}`);\n    },\n    async searchCategories() {\n      const user_id = parseInt(localStorage.getItem('userId'));\n      const response = await fetch(`http://127.0.0.1:5000/search/user/${user_id}/categories?input_name=${this.searchName}`, {\n        method: \"GET\",\n        headers: {\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(async result => {\n        const data = await result.json();\n        if (result.ok) {\n          this.categories = data.categories;\n        } else {\n          this.$store.commit('setNotification', {\n            variant: 'error',\n            message: 'Something went wrong. Try again!!!'\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["Home","name","components","data","categories","searchName","methods","chunkArray","arr","size","chunkedArr","i","length","push","slice","getImageUrl","imagePath","require","searchCategories","user_id","parseInt","localStorage","getItem","response","fetch","method","headers","Authorization","then","result","json","ok","$store","commit","variant","message"],"sources":["src/components/SearchCategory.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <Home />\r\n  \r\n      <div class=\"search-container\">\r\n        <h1>Search Category</h1>\r\n        <div class=\"search-input\">\r\n          <label for=\"name\">Name:</label>\r\n          <input type=\"text\" id=\"name\" v-model=\"searchName\" />\r\n          <b-btn variant=\"primary\" @click=\"searchCategories\">Search</b-btn>\r\n        </div>\r\n        <!-- ... Existing search box and search button code ... -->\r\n  \r\n        <div class=\"categories-container\">\r\n    <template v-for=\"rowCategories in chunkArray(categories, 3)\">\r\n      \r\n        <div v-for=\"(category, index) in rowCategories\" :key=\"index\" class=\"category-item\">\r\n          <img class=\"show-image\" :src=\"getImageUrl(category.image)\" />\r\n          <h2> {{category.name}}</h2>\r\n        \r\n      </div>\r\n    </template>\r\n  </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import Home from './Home.vue'\r\n  \r\n  export default {\r\n    name: 'SearchCategory',\r\n    components: {\r\n      Home\r\n    },\r\n    data() {\r\n      return {\r\n        categories: [],\r\n        searchName: \"\"\r\n      };\r\n    },\r\n    methods: {\r\n      // ... Existing search methods ...\r\n      chunkArray(arr, size) {\r\n        // Helper method to split the array into groups of given size\r\n        const chunkedArr = [];\r\n        for (let i = 0; i < arr.length; i += size) {\r\n          chunkedArr.push(arr.slice(i, i + size));\r\n        }\r\n        return chunkedArr;\r\n      },\r\n      getImageUrl(imagePath) {\r\n            return require(`../assets/images/${imagePath}`)\r\n        },\r\n      async searchCategories() {\r\n        const user_id = parseInt(localStorage.getItem('userId')); \r\n        const response = await fetch(`http://127.0.0.1:5000/search/user/${user_id}/categories?input_name=${this.searchName}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: 'Bearer ' + localStorage.getItem('access_token'),\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      }).then(async result => {\r\n        const data = await result.json();\r\n        if (result.ok) {\r\n          this.categories = data.categories;\r\n        }\r\n        else {\r\n          this.$store.commit('setNotification', { variant: 'error', message: 'Something went wrong. Try again!!!' });\r\n        }\r\n      })\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* ... Existing styles ... */\r\n  \r\n  .category-row {\r\n    width: 100%;\r\n    display: flex;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .category-item {\r\n    width: calc(33.33% - 10px);\r\n    padding: 10px;\r\n    border: 1px solid #ccc;\r\n    background-color: greenyellow;\r\n    border-radius: 5px;\r\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n    /* Add the margin property to create space between theatres */\r\n    margin-right: 10px;\r\n  }\r\n  .search-container {\r\n    padding: 20px;\r\n  }\r\n  \r\n  .search-input {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .categories-container {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n  .show-image{\r\n    width: 420px;\r\n    height: 220px;\r\n  }\r\n\r\n  /* Add more custom styles as needed */\r\n  </style>"],"mappings":";AA4BA,OAAAA,IAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACA;MACAC,UAAA;MACAC,UAAA;IACA;EACA;EACAC,OAAA;IACA;IACAC,WAAAC,GAAA,EAAAC,IAAA;MACA;MACA,MAAAC,UAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,GAAAH,GAAA,CAAAI,MAAA,EAAAD,CAAA,IAAAF,IAAA;QACAC,UAAA,CAAAG,IAAA,CAAAL,GAAA,CAAAM,KAAA,CAAAH,CAAA,EAAAA,CAAA,GAAAF,IAAA;MACA;MACA,OAAAC,UAAA;IACA;IACAK,YAAAC,SAAA;MACA,OAAAC,OAAA,qBAAAD,SAAA;IACA;IACA,MAAAE,iBAAA;MACA,MAAAC,OAAA,GAAAC,QAAA,CAAAC,YAAA,CAAAC,OAAA;MACA,MAAAC,QAAA,SAAAC,KAAA,sCAAAL,OAAA,+BAAAd,UAAA;QACAoB,MAAA;QACAC,OAAA;UACAC,aAAA,cAAAN,YAAA,CAAAC,OAAA;UACA;QACA;MACA,GAAAM,IAAA,OAAAC,MAAA;QACA,MAAA1B,IAAA,SAAA0B,MAAA,CAAAC,IAAA;QACA,IAAAD,MAAA,CAAAE,EAAA;UACA,KAAA3B,UAAA,GAAAD,IAAA,CAAAC,UAAA;QACA,OACA;UACA,KAAA4B,MAAA,CAAAC,MAAA;YAAAC,OAAA;YAAAC,OAAA;UAAA;QACA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}