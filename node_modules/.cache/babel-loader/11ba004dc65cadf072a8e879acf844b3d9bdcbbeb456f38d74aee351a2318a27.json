{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Home from './Home.vue';\nexport default {\n  name: 'SignUp',\n  components: {\n    Home\n  },\n  data() {\n    return {\n      email: \"\",\n      username: \"\",\n      password: \"\",\n      confirm_password: \"\",\n      errorMessages: [],\n      roles: [],\n      selectedRole: \"\",\n      serverErrorMessages: []\n    };\n  },\n  mounted() {\n    this.fetchRoles();\n  },\n  watch: {\n    email(value) {\n      this.handleInputChange('email', value);\n      this.serverErrorMessages = [];\n    },\n    username(value) {\n      this.handleInputChange('username', value);\n      this.serverErrorMessages = [];\n    },\n    password(value) {\n      this.handleInputChange('password', value);\n      this.serverErrorMessages = [];\n    },\n    confirm_password(value) {\n      this.handleInputChange('confirm_password', value);\n      this.serverErrorMessages = [];\n    },\n    selectedRole(value) {\n      this.handleInputChange('selectedRole', value);\n      this.serverErrorMessages = [];\n    }\n  },\n  computed: {\n    errorMessageMarginTop() {\n      let messageLength = this.errorMessages.length > 0 ? this.errorMessages.length : this.serverErrorMessages.length;\n      if (10 - messageLength * 2 >= 2) return `${10 - messageLength * 2}px`;else return `${2}px`;\n    }\n  },\n  methods: {\n    handleInputChange(fieldName, fieldValue) {\n      let message = '';\n      if (fieldName === 'email') {\n        message = 'Email should not be empty';\n        this.validateEachEntity(this.email, message);\n      } else if (fieldName === 'username') {\n        message = 'Username should not be empty';\n        this.validateEachEntity(this.username, message);\n      } else if (fieldName === 'password') {\n        message = 'Password should not be empty';\n        this.validateEachEntity(this.password, message);\n      } else if (fieldName === 'confirm_password') {\n        message = 'Confirm password should not be empty';\n        this.validateEachEntity(this.confirm_password, message);\n        message = 'Password and confirm password do not match.';\n        if (this.errorMessages.includes(message)) {\n          let indexOFMessage = this.errorMessages.indexOf(message);\n          this.errorMessages = this.errorMessages.filter(errorMessage => errorMessage !== message);\n          if (this.password !== this.confirm_password) {\n            this.errorMessages.splice(indexOFMessage, 0, message);\n          }\n        } else {\n          if (this.password !== this.confirm_password) {\n            this.errorMessages.push(message);\n          }\n        }\n      } else if (fieldName === 'selectedRole') {\n        message = 'Role should be selected';\n        this.validateEachEntity(this.selectedRole, message);\n      }\n    },\n    async fetchRoles() {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/api/roles');\n        const data = await response.json();\n        this.roles = data;\n      } catch (error) {\n        this.errorMessages.push(\"Error fetching roles\");\n      }\n    },\n    selectRole(role) {\n      this.selectedRole = role.storedName;\n    },\n    validateEachEntity(entityToValidate, message) {\n      if (this.errorMessages.includes(message)) {\n        let indexOFMessage = this.errorMessages.indexOf(message);\n        this.errorMessages = this.errorMessages.filter(errorMessage => errorMessage !== message);\n        if (entityToValidate == null || entityToValidate == '') {\n          this.errorMessages.splice(indexOFMessage, 0, message);\n        }\n      } else {\n        if (entityToValidate == null || entityToValidate == '') {\n          this.errorMessages.push(message);\n        }\n      }\n    },\n    validation() {\n      let message = 'Email should not be empty';\n      this.validateEachEntity(this.email, message);\n      message = 'Username should not be empty';\n      this.validateEachEntity(this.username, message);\n      message = 'Password should not be empty';\n      this.validateEachEntity(this.password, message);\n      message = 'Confirm password should not be empty';\n      this.validateEachEntity(this.confirm_password, message);\n      message = 'Role should be selected';\n      this.validateEachEntity(this.selectedRole, message);\n      if (this.password !== this.confirm_password) {\n        this.errorMessages.push('Password and confirm password do not match.');\n      }\n    },\n    async signup() {\n      this.validation();\n      if (this.errorMessages.length > 0) {\n        return;\n      }\n      const response = await fetch('http://127.0.0.1:5000/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          input_email: this.email,\n          input_username: this.username,\n          input_password: this.password,\n          input_confirm_password: this.confirm_password,\n          input_role: this.selectedRole\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // User is authenticated, redirect to home page\n        this.$router.push('/login');\n      } else {\n        // Show error message\n        this.serverErrorMessages = data.error_messages;\n      }\n    }\n  }\n};","map":{"version":3,"names":["Home","name","components","data","email","username","password","confirm_password","errorMessages","roles","selectedRole","serverErrorMessages","mounted","fetchRoles","watch","value","handleInputChange","computed","errorMessageMarginTop","messageLength","length","methods","fieldName","fieldValue","message","validateEachEntity","includes","indexOFMessage","indexOf","filter","errorMessage","splice","push","response","fetch","json","error","selectRole","role","storedName","entityToValidate","validation","signup","method","headers","body","JSON","stringify","input_email","input_username","input_password","input_confirm_password","input_role","ok","$router","error_messages"],"sources":["src/components/SignUp.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <Home />\r\n        <div id=\"sign-up\">\r\n            <h2 id=\"sign-up-input\" class=\"input\">Sign Up</h2>\r\n            <div id=\"sign-up-form\" class=\"form-group\">\r\n                <div id=\"sign-up-error-message\" v-if=\"errorMessages.length > 0 || serverErrorMessages.length > 0\" class=\"error-message\">\r\n                    <ul>\r\n                        <template v-if=\"errorMessages.length > 0\">\r\n                            <li v-for=\"errorMessage in errorMessages\" :key=\"errorMessage\">{{ errorMessage }}</li>\r\n                        </template>\r\n                        <template v-else-if=\"serverErrorMessages.length > 0\">\r\n                            <li v-for=\"serverErrorMessage in serverErrorMessages\" :key=\"serverErrorMessage\">{{ serverErrorMessage }}</li>\r\n                        </template>\r\n                    </ul>\r\n                </div>\r\n                <label for=\"email\" :style=\"{ marginTop: errorMessageMarginTop }\" class=\"text-left signup-form-label\">Email Address</label>\r\n                <input type=\"text\" v-model=\"email\"  class=\"form-control\" placeholder=\"Enter Email\" size=\"10\"/>\r\n                \r\n                <label for=\"username\" :style=\"{ marginTop: errorMessageMarginTop }\" class=\"text-left signup-form-label\">Username</label>\r\n                <input type=\"text\" v-model=\"username\"  class=\"form-control\" placeholder=\"Enter Username\" size=\"10\"/>\r\n                \r\n                <label for=\"password\" :style=\"{ marginTop: errorMessageMarginTop }\" class=\"signup-form-label\">Password</label>\r\n                <input type=\"password\" v-model=\"password\" class = \"form-control\" placeholder=\"Enter Password\" size=\"15\"/>\r\n                \r\n                <label for=\"confirm_password\" :style=\"{ marginTop: errorMessageMarginTop }\" class=\"signup-form-label\" >Confirm Password</label>\r\n                <input type=\"password\" v-model=\"confirm_password\"  class=\"form-control\" placeholder=\"Enter Password Again\" size=\"10\"/>\r\n                \r\n                <div :style=\"{ marginTop: errorMessageMarginTop }\" id=\"sign-up-dropdown\" class=\"dropdown text-center\">\r\n                    <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"sign-up-dropdown-button\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                        {{ selectedRole || 'Role' }}\r\n                    </button>\r\n                    <div id=\"sign-up-dropdown-values\" class=\"dropdown-menu\" aria-labelledby=\"sign-up-dropdown-button\">\r\n                        <a class=\"dropdown-item\" v-for=\"role in roles\" :key=\"role.id\" @click=\"selectRole(role)\">{{ role.storedName }}</a>\r\n                    </div>\r\n                </div>\r\n                <br/>\r\n                <div class=\"text-center\">\r\n                <button class=\"btn btn-primary\" v-on:click=\"signup\">Sign-up</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport Home from './Home.vue'\r\nexport default{\r\n    name : 'SignUp',\r\n    components : {\r\n        Home\r\n    },\r\n    data(){\r\n        return {\r\n            email : \"\",\r\n            username : \"\",\r\n            password : \"\",\r\n            confirm_password : \"\",\r\n            errorMessages : [],\r\n            roles: [],\r\n            selectedRole: \"\",\r\n            serverErrorMessages: []\r\n        };\r\n    },\r\n    mounted(){\r\n        this.fetchRoles();\r\n    },\r\n    watch: {\r\n        email(value) {\r\n            this.handleInputChange('email', value);\r\n            this.serverErrorMessages = []\r\n        },\r\n\r\n        username(value) {\r\n            this.handleInputChange('username', value);\r\n            this.serverErrorMessages = []\r\n        },\r\n\r\n        password(value) {\r\n            this.handleInputChange('password', value);\r\n            this.serverErrorMessages = []\r\n        },\r\n\r\n        confirm_password(value) {\r\n            this.handleInputChange('confirm_password', value);\r\n            this.serverErrorMessages = []\r\n        },\r\n        selectedRole(value){\r\n            this.handleInputChange('selectedRole', value);\r\n            this.serverErrorMessages = []\r\n        }\r\n    },\r\n    computed: {\r\n        errorMessageMarginTop() {\r\n            let messageLength = this.errorMessages.length > 0 ? this.errorMessages.length : this.serverErrorMessages.length;\r\n\r\n            if(10 - (messageLength) * 2 >= 2)\r\n                return `${10 - (messageLength) * 2}px`;\r\n            else\r\n                return `${2}px`;\r\n        }\r\n    },\r\n    methods:{\r\n        handleInputChange(fieldName, fieldValue){\r\n\r\n            let message = '';\r\n            if(fieldName === 'email'){\r\n                message = 'Email should not be empty';\r\n                this.validateEachEntity(this.email, message);\r\n            }\r\n            else if(fieldName === 'username'){\r\n                message = 'Username should not be empty';\r\n                this.validateEachEntity(this.username, message);\r\n            }\r\n            else if(fieldName === 'password'){\r\n                message = 'Password should not be empty';\r\n                this.validateEachEntity(this.password, message);\r\n            }\r\n            else if(fieldName === 'confirm_password'){\r\n                message = 'Confirm password should not be empty';\r\n                this.validateEachEntity(this.confirm_password, message);\r\n\r\n                message = 'Password and confirm password do not match.';\r\n                if(this.errorMessages.includes(message)){\r\n                    let indexOFMessage = this.errorMessages.indexOf(message);\r\n                    this.errorMessages = this.errorMessages.filter((errorMessage) => errorMessage !== message);\r\n                    if (this.password !== this.confirm_password){\r\n                        this.errorMessages.splice(indexOFMessage, 0, message);\r\n                    }\r\n                }\r\n                else{\r\n                    if (this.password !== this.confirm_password){\r\n                        this.errorMessages.push(message);\r\n                    }\r\n                }\r\n            }\r\n            else if(fieldName === 'selectedRole'){\r\n                message = 'Role should be selected';\r\n                this.validateEachEntity(this.selectedRole, message);\r\n            }\r\n        },\r\n        async fetchRoles(){\r\n            try{\r\n                const response = await fetch('http://127.0.0.1:5000/api/roles');\r\n                const data = await response.json();\r\n                this.roles = data;\r\n            }\r\n            catch(error){\r\n                this.errorMessages.push(\"Error fetching roles\");\r\n            }\r\n        },\r\n        selectRole(role){\r\n            this.selectedRole = role.storedName;\r\n        },\r\n        validateEachEntity(entityToValidate, message){\r\n            if(this.errorMessages.includes(message)){\r\n                let indexOFMessage = this.errorMessages.indexOf(message);\r\n                this.errorMessages = this.errorMessages.filter((errorMessage) => errorMessage !== message);\r\n                if(entityToValidate == null || entityToValidate == ''){\r\n                    this.errorMessages.splice(indexOFMessage, 0, message);\r\n                }\r\n            }\r\n            else{\r\n                if(entityToValidate == null || entityToValidate == ''){\r\n                    this.errorMessages.push(message);\r\n                }\r\n            }\r\n        }\r\n        ,\r\n        validation(){\r\n\r\n            let message = 'Email should not be empty'\r\n            this.validateEachEntity(this.email, message);\r\n\r\n            message = 'Username should not be empty';\r\n            this.validateEachEntity(this.username, message);\r\n            \r\n            message = 'Password should not be empty';\r\n            this.validateEachEntity(this.password, message);\r\n               \r\n            message = 'Confirm password should not be empty';\r\n            this.validateEachEntity(this.confirm_password, message);\r\n\r\n            message = 'Role should be selected';\r\n            this.validateEachEntity(this.selectedRole, message);\r\n            \r\n            if (this.password !== this.confirm_password) {\r\n                this.errorMessages.push('Password and confirm password do not match.');\r\n            }\r\n        },\r\n        async signup()\r\n        {\r\n            this.validation();\r\n            if(this.errorMessages.length > 0){\r\n                return;\r\n            }\r\n\r\n            const response = await fetch('http://127.0.0.1:5000/signup', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                input_email: this.email,\r\n                input_username: this.username,\r\n                input_password: this.password,\r\n                input_confirm_password : this.confirm_password,\r\n                input_role : this.selectedRole\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n                // User is authenticated, redirect to home page\r\n             this.$router.push('/login');\r\n            } \r\n            else {\r\n                // Show error message\r\n                this.serverErrorMessages = data.error_messages;\r\n            }   \r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n \r\n  \r\n<style scoped>\r\n/* Container styles */\r\n#sign-up-input {\r\n    margin-top: 0px;\r\n    text-align: center;\r\n}\r\n\r\n#sign-up-form {\r\n    width: 400px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n    background-color: rgb(203, 235, 135);\r\n    border: 8px double red;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n}\r\n\r\n#sign-up-error-message {\r\n  width: 370px;\r\n  margin-top: -15px;\r\n  border-color: black; \r\n  border: 2px solid black;\r\n}\r\n\r\n#sign-up-error-message ul {\r\n  color: white;\r\n  background-color: lightcoral;\r\n  padding: 10px;\r\n  margin: 0;\r\n  list-style-type: none;\r\n}\r\n\r\n/* Form field styles */\r\n.form-control {\r\n    width: 300px;\r\n    height: 40px;\r\n    border: 1px solid black;\r\n    padding: 2px;\r\n    margin-bottom: 10px;\r\n    box-sizing: border-box;\r\n}\r\n\r\n\r\n.signup-form-label{\r\n    text-align: left;\r\n}\r\n\r\n/* Dropdown styles */\r\n\r\n.dropdown-toggle {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 300px;\r\n    height: 40px;\r\n    border: 1px solid black;\r\n    cursor: pointer;\r\n}\r\n\r\n.dropdown-menu {\r\n    width: 300px;\r\n}\r\n\r\n.dropdown-item {\r\n    padding: 10px;\r\n    cursor: pointer;\r\n}\r\n\r\n/* Button styles */\r\n.btn-primary {\r\n    width: 150px;\r\n    height: 40px;\r\n    background-color: #007bff;\r\n    color: white;\r\n    border: none;\r\n    cursor: pointer;\r\n}\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}